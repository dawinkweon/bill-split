{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["AddPersonTextBox","props","useState","personName","setPersonName","className","placeholder","value","onChange","evt","target","onClick","onNewPersonAdded","BillItemRow","item","onItemChanged","rowId","name","amount","splitBy","orderedSplitItems","_","sortBy","newName","type","_newAmount","newAmount","parseFloat","onAmountChanged","map","split","ratio","person","_newRatio","newRatio","isNaN","console","log","newSplitBy","filter","colId","onRatioChanged","App","billItems","setBillItems","people","setPeople","createNewItem","lastRowId","max","undefined","JSON","stringify","find","updatedItem","orderedBillItems","summary","totalAmount","sum","allSplitBy","results","zip","ratios","r","i","splitTotals","getSummary","hasSplitErrors","Container","lastColId","newPerson","updatedBillItems","billItem","hasBackgroundDangerLight","hasBackgroundSuccessLight","total","toFixed","getSplitSummary","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6c9de13a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { BillItem, BillSummary, Person, SplitInfo } from \"./models/Model\";\nimport './App.css';\nimport 'bulma/css/bulma.css'\nimport { Table, Tr, Td, Thead, Tbody, Input, Container, Button, Title, Label, Tfoot } from \"trunx\"\nimport _ from \"lodash\";\n\ninterface AddPersonTextBoxProps {\n  onNewPersonAdded(personName: string): any;\n}\n\nconst AddPersonTextBox: React.FC<AddPersonTextBoxProps> = (props) => {\n  const [personName, setPersonName] = useState(\"\");\n\n  return <>\n    <Td>\n      <Input className=\"new-person-input\" placeholder=\"New Person\" value={personName} onChange={(evt) => { setPersonName(evt.target.value); }} />\n    </Td>\n    <Td>\n      <Button onClick={() => {\n        if (personName === \"\") {\n          return;\n        }\n        props.onNewPersonAdded(personName)\n        setPersonName(\"\");\n      }}>âž•</Button>\n    </Td>\n  </>\n};\n\ninterface BillItemRowProps {\n  item: BillItem;\n  onItemChanged(rowId: number, name: string, amount: number, splitBy: SplitInfo[]): any;\n}\n\nconst BillItemRow: React.FC<BillItemRowProps> = ({ item, onItemChanged }) => {\n  const { rowId, name, amount, splitBy } = item;\n  const onNameChanged = (newName: string) => {\n    onItemChanged(rowId, newName, amount, splitBy);\n  }\n\n  const onAmountChanged = (_newAmount: string) => {\n    let newAmount = parseFloat(_newAmount);\n\n    onItemChanged(rowId, name, newAmount, splitBy);\n  }\n\n  const onRatioChanged = (person: Person, _newRatio: string) => {\n    let newRatio = parseFloat(_newRatio);\n    if (isNaN(newRatio)) {\n      newRatio = 0;\n    }\n\n    console.log(newRatio);\n\n    const newSplitBy = [...splitBy.filter(split => split.person.colId !== person.colId), { person: person, ratio: newRatio }]\n    onItemChanged(rowId, name, amount, newSplitBy)\n  }\n\n  const orderedSplitItems = _.sortBy(splitBy, \"person.colId\");\n\n  return (\n    <Tr>\n      <Td><Input className=\"item-name-input\" value={item.name} placeholder=\"New item\" onChange={(evt) => onNameChanged(evt.target.value)} /></Td>\n      <Td><Input className=\"amount-input\" value={item.amount} type=\"number\" onChange={(evt) => onAmountChanged(evt.target.value)} /></Td>\n      {orderedSplitItems.map(split => {\n        return <Td key={split.person.colId}><Input className=\"ratio-input\" value={split.ratio} type=\"number\" onChange={(evt) => onRatioChanged(split.person, evt.target.value)} /></Td>\n      })}\n    </Tr>\n  );\n}\n\nconst App = () => {\n  const [billItems, setBillItems] = useState<BillItem[]>([]);\n  const [people, setPeople] = useState<Person[]>([]);\n\n  const onNewPersonAdded = (personName: string) => {\n\n    const lastColId = _.max(people.map(person => person.colId));\n    const newColId = lastColId !== undefined ? lastColId + 1 : 0;\n    const newPerson = { colId: newColId, name: personName };\n\n    const updatedBillItems = billItems.map(billItem => {\n      return {\n        ...billItem,\n        splitBy: [...billItem.splitBy, { person: newPerson, ratio: 0 }]\n      }\n    });\n\n    setBillItems(updatedBillItems);\n    setPeople([...people, newPerson])\n  }\n\n  const createNewItem = (): BillItem => {\n    const lastRowId = _.max(billItems.map(item => item.rowId));\n    const newRowId = lastRowId !== undefined ? lastRowId + 1 : 0;\n\n    return {\n      rowId: newRowId,\n      name: \"\",\n      amount: 0,\n      splitBy: people.map(person => { return { person, ratio: 0 } })\n    };\n  }\n\n  const onRowAdded = () => {\n    setBillItems([...billItems, createNewItem()])\n  }\n\n  const onItemChanged = (rowId: number, name: string, amount: number, splitBy: SplitInfo[]) => {\n    console.log(`onItemChanged with params [${rowId}, ${name}, ${amount}, ${JSON.stringify(splitBy)}]`)\n\n    const found = _.find(billItems, [\"rowId\", rowId]);\n    if (found) {\n      const updatedItem: BillItem = { rowId, name, amount, splitBy };\n      setBillItems([...billItems.filter(item => item.rowId !== rowId), updatedItem])\n    }\n  }\n\n  const orderedBillItems = _.sortBy(billItems, \"rowId\");\n\n  const getSummary = (): BillSummary => {\n    const totalAmount = _.sum(billItems.map(item => item.amount));\n\n    const allSplitBy = orderedBillItems.map(item => _.sortBy(item.splitBy, \"person.colId\").map(split => {\n      return split.ratio / _.sum(item.splitBy.map(split => split.ratio));\n    }));\n    const transposed = _.zip(...allSplitBy);\n    const results = transposed.map((ratios) => {\n\n      const results = ratios.map((r, i) => (r !== undefined && !isNaN(r) ? r : 0) * orderedBillItems[i].amount);\n      return _.sum(results);\n\n    });\n\n    console.log(results);\n\n    return {\n      totalAmount: totalAmount,\n      splitTotals: results\n    }\n  }\n\n  const summary = getSummary();\n  const hasSplitErrors = summary.totalAmount !== _.sum(summary.splitTotals);\n\n  const getSplitSummary = (summary: BillSummary) => {\n    return <Tr className=\"summary-row\" hasBackgroundDangerLight={hasSplitErrors} hasBackgroundSuccessLight={!hasSplitErrors}>\n      <Td><Label>Total</Label></Td>\n      <Td><Label>${summary.totalAmount}</Label></Td>\n      {summary.splitTotals.map(total => { return <Td><Label>${total.toFixed(2)}</Label></Td> })}\n    </Tr>\n  }\n\n  return (\n    <Container className=\"root\">\n      <Title>Split bills</Title>\n      <Table.Container>\n        <Table>\n          <Thead>\n            <Td><Label>Item name</Label></Td>\n            <Td><Label>Amount</Label></Td>\n            {people.map(person => {\n              return <Td key={person.colId}>{person.name}</Td>\n            })}\n            <AddPersonTextBox onNewPersonAdded={onNewPersonAdded} />\n          </Thead>\n          <Tbody>\n            {orderedBillItems.map(item => <BillItemRow key={item.rowId} item={item} onItemChanged={onItemChanged} />)}\n          </Tbody>\n          <Tfoot>\n            <Tr className=\"add-item-row\"><Button onClick={() => onRowAdded()}>âž•</Button></Tr>\n            {summary.totalAmount > 0 && getSplitSummary(summary)}\n          </Tfoot>\n        </Table>\n      </Table.Container>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}