{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["AddPersonTextBox","props","useState","personName","setPersonName","className","placeholder","value","onChange","evt","target","onClick","onNewPersonAdded","BillItemRow","item","onItemChanged","showRemaining","rowId","name","amount","splitBy","orderedSplitItems","_","sortBy","remainingRatio","sum","filter","split","isNaN","ratio","map","hasAmountError","isAmountSuccess","hasBackgroundDangerLight","hasBackgroundSuccessLight","newName","type","_newAmount","newAmount","parseFloat","onAmountChanged","person","_newRatio","newRatio","newSplitBy","colId","onRatioChanged","toFixed","App","billItems","setBillItems","people","setPeople","createNewItem","lastRowId","max","undefined","console","log","JSON","stringify","find","updatedItem","orderedBillItems","summary","totalAmount","allSplitBy","flatMap","results","zip","ratios","r","i","splitTotals","getSummary","hasSplitErrors","length","lastColId","newPerson","updatedBillItems","billItem","total","getSplitSummary","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.524e20fa.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { BillItem, BillSummary, Person, SplitInfo } from \"./models/Model\";\nimport './App.css';\nimport 'bulma/css/bulma.css'\nimport { Table, Tr, Td, Thead, Tbody, Input, Container, Button, Title, Label, Tfoot } from \"trunx\"\nimport _ from \"lodash\";\n\ninterface AddPersonTextBoxProps {\n  onNewPersonAdded(personName: string): any;\n}\n\nconst AddPersonTextBox: React.FC<AddPersonTextBoxProps> = (props) => {\n  const [personName, setPersonName] = useState(\"\");\n\n  return <>\n    <Td className=\"new-person-input\">\n      <Input placeholder=\"New Person\" value={personName} onChange={(evt) => { setPersonName(evt.target.value); }} />\n    </Td>\n    <Td>\n      <Button onClick={() => {\n        if (personName === \"\") {\n          return;\n        }\n        props.onNewPersonAdded(personName)\n        setPersonName(\"\");\n      }}>âž•</Button>\n    </Td>\n  </>\n};\n\ninterface BillItemRowProps {\n  item: BillItem;\n  onItemChanged(rowId: number, name: string, amount: number, splitBy: SplitInfo[]): any;\n  showRemaining: boolean;\n}\n\nconst BillItemRow: React.FC<BillItemRowProps> = ({ item, onItemChanged, showRemaining }) => {\n  const { rowId, name, amount, splitBy } = item;\n  const onNameChanged = (newName: string) => {\n    onItemChanged(rowId, newName, amount, splitBy);\n  }\n\n  const onAmountChanged = (_newAmount: string) => {\n    let newAmount = parseFloat(_newAmount);\n\n    onItemChanged(rowId, name, newAmount, splitBy);\n  }\n\n  const onRatioChanged = (person: Person, _newRatio: string) => {\n    let newRatio = parseFloat(_newRatio);\n    const newSplitBy = [...splitBy.filter(split => split.person.colId !== person.colId), { person: person, ratio: newRatio }]\n    onItemChanged(rowId, name, amount, newSplitBy)\n  }\n\n  const orderedSplitItems = _.sortBy(splitBy, \"person.colId\");\n  const remainingRatio = 1 - _.sum(splitBy.filter(split => !isNaN(split.ratio)).map(split => split.ratio));\n  const hasAmountError = remainingRatio !== 0 && remainingRatio !== 1;\n  const isAmountSuccess = remainingRatio === 0;\n\n  return (\n    <Tr hasBackgroundDangerLight={hasAmountError} hasBackgroundSuccessLight={isAmountSuccess} >\n      <Td className=\"item-name-input\"><Input value={item.name} placeholder=\"New item\" onChange={(evt) => onNameChanged(evt.target.value)} /></Td>\n      <Td className=\"amount-input\"><Input value={item.amount} type=\"number\" onChange={(evt) => onAmountChanged(evt.target.value)} /></Td>\n      {orderedSplitItems.map(split => {\n        return <Td key={split.person.colId} className=\"ratio-input\"><Input value={split.ratio} type=\"number\" onChange={(evt) => onRatioChanged(split.person, evt.target.value)} /></Td>\n      })}\n      { showRemaining && <td>{remainingRatio !== 0 ? remainingRatio.toFixed(2) : \"-\"}</td> }\n    </Tr>\n  );\n}\n\nconst App = () => {\n  const [billItems, setBillItems] = useState<BillItem[]>([]);\n  const [people, setPeople] = useState<Person[]>([]);\n\n  const onNewPersonAdded = (personName: string) => {\n    \n    const lastColId = _.max(people.map(person => person.colId));\n    const newColId = lastColId !== undefined ? lastColId + 1 : 0;\n    const newPerson = { colId: newColId, name: personName };\n\n    const updatedBillItems = billItems.map(billItem => {\n      return {\n        ...billItem,\n        splitBy: [...billItem.splitBy, { person: newPerson, ratio: 0 }]\n      }\n    });\n\n    setBillItems(updatedBillItems);\n    setPeople([...people, newPerson])\n  }\n\n  const createNewItem = (): BillItem => {\n    const lastRowId = _.max(billItems.map(item => item.rowId));\n    const newRowId = lastRowId !== undefined ? lastRowId + 1 : 0;\n\n    return {\n      rowId: newRowId,\n      name: \"\",\n      amount: 0,\n      splitBy: people.map(person => { return { person, ratio: 0 } })\n    };\n  }\n\n  const onRowAdded = () => {\n    setBillItems([...billItems, createNewItem()])\n  }\n\n  const onItemChanged = (rowId: number, name: string, amount: number, splitBy: SplitInfo[]) => {\n    console.log(`onItemChanged with params [${rowId}, ${name}, ${amount}, ${JSON.stringify(splitBy)}]`)\n\n    const found = _.find(billItems, [\"rowId\", rowId]);\n    if (found) {\n      const updatedItem: BillItem = { rowId, name, amount, splitBy };\n      setBillItems([...billItems.filter(item => item.rowId !== rowId), updatedItem])\n    }\n  }\n\n  const orderedBillItems = _.sortBy(billItems, \"rowId\");\n\n  const getSummary = (): BillSummary => {\n    const totalAmount = _.sum(billItems.map(item => item.amount));\n\n    const allSplitBy = orderedBillItems.map(item => item.splitBy.flatMap(split => split.ratio));\n    const transposed = _.zip(...allSplitBy);\n    const results = transposed.map((ratios) => {\n\n      const results = ratios.map((r,i) => (r !== undefined && !isNaN(r) ? r : 0) * orderedBillItems[i].amount);\n      return _.sum(results);\n\n    });\n\n    console.log(results);\n\n    return {\n      totalAmount: totalAmount,\n      splitTotals: results\n    }\n  }\n  \n  const summary = getSummary();\n  const hasSplitErrors = summary.totalAmount !== _.sum(summary.splitTotals);\n\n  const getSplitSummary = (summary: BillSummary) => {\n    return <Tr className=\"summary-row\" hasBackgroundDangerLight={hasSplitErrors} hasBackgroundSuccessLight={!hasSplitErrors}>\n      <Td><Label>Total</Label></Td>\n      <Td><Label>${summary.totalAmount}</Label></Td>\n      {summary.splitTotals.map(total => { return <Td><Label>${total}</Label></Td> })}\n    </Tr>\n  }\n\n  const showRemaining = people.length > 0;\n\n  return (\n    <Container className=\"root\">\n      <Title>Split bills</Title>\n      <Table>\n        <Thead>\n          <Td><Label>Item name</Label></Td>\n          <Td><Label>Amount</Label></Td>\n          {people.map(person => {\n            return <Td key={person.colId}>{person.name}</Td>\n          })}\n          { showRemaining && <Td><Label>Remaining</Label></Td> }\n          <AddPersonTextBox onNewPersonAdded={onNewPersonAdded} />\n        </Thead>\n        <Tbody>\n          {orderedBillItems.map(item => <BillItemRow key={item.rowId} item={item} onItemChanged={onItemChanged} showRemaining={showRemaining} />)}\n        </Tbody>\n        <Tfoot>\n          <Tr className=\"add-item-row\"><Button onClick={() => onRowAdded()}>âž•</Button></Tr>\n          { summary.totalAmount > 0 && getSplitSummary(summary)}\n        </Tfoot>\n      </Table>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}