{"version":3,"sources":["SplitBills/components/AddPersonTextBox.tsx","SplitBills/components/BillItemRow.tsx","SplitBills/SplitBillsPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AddPersonTextBox","props","useState","personName","setPersonName","className","placeholder","value","onChange","evt","target","onClick","onNewPersonAdded","BillItemRow","item","onItemChanged","rowId","name","amount","splitBy","orderedSplitItems","_","sortBy","newName","type","onFocus","select","_newAmount","newAmount","parseFloat","onAmountChanged","map","split","ratio","person","_newRatio","newRatio","isNaN","console","log","newSplitBy","filter","colId","onRatioChanged","SplitBillsPage","billItems","setBillItems","people","setPeople","useEffect","get","set","createNewItem","lastRowId","max","undefined","JSON","stringify","find","updatedItem","orderedBillItems","summary","totalAmount","sum","allSplitBy","splitTotals","zip","ratios","results","r","i","getSummary","hasSplitErrors","userDataExists","length","Container","lastColId","newPerson","updatedBillItems","billItem","hasBackgroundDangerLight","hasBackgroundSuccessLight","total","toFixed","getSplitSummary","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3c3ec0cc.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport '../../App.css';\nimport 'bulma/css/bulma.css'\nimport { Td, Input, Button } from \"trunx\"\n\ninterface AddPersonTextBoxProps {\n    onNewPersonAdded(personName: string): any;\n}\n\nconst AddPersonTextBox: React.FC<AddPersonTextBoxProps> = (props) => {\n    const [personName, setPersonName] = useState(\"\");\n\n    return <>\n        <Td>\n            <Input className=\"new-person-input\" placeholder=\"New Person\" value={personName} onChange={(evt) => { setPersonName(evt.target.value); }} />\n        </Td>\n        <Td>\n            <Button onClick={() => {\n                if (personName === \"\") {\n                    return;\n                }\n                props.onNewPersonAdded(personName)\n                setPersonName(\"\");\n            }}>âž•</Button>\n        </Td>\n    </>\n};\n\nexport default AddPersonTextBox;","import { Tr, Td, Input } from \"trunx\";\nimport _ from \"lodash\";\nimport { BillItem, Person, SplitInfo } from \"../../models/Model\";\n\n\ninterface BillItemRowProps {\n  item: BillItem;\n  onItemChanged(rowId: number, name: string, amount: number, splitBy: SplitInfo[]): any;\n}\n\nconst BillItemRow: React.FC<BillItemRowProps> = ({ item, onItemChanged }) => {\n  const { rowId, name, amount, splitBy } = item;\n  const onNameChanged = (newName: string) => {\n    onItemChanged(rowId, newName, amount, splitBy);\n  }\n\n  const onAmountChanged = (_newAmount: string) => {\n    let newAmount = parseFloat(_newAmount);\n\n    onItemChanged(rowId, name, newAmount, splitBy);\n  }\n\n  const onRatioChanged = (person: Person, _newRatio: string) => {\n    let newRatio = parseFloat(_newRatio);\n    if (isNaN(newRatio)) {\n      newRatio = 0;\n    }\n\n    console.log(newRatio);\n\n    const newSplitBy = [...splitBy.filter(split => split.person.colId !== person.colId), { person: person, ratio: newRatio }]\n    onItemChanged(rowId, name, amount, newSplitBy)\n  }\n\n  const orderedSplitItems = _.sortBy(splitBy, \"person.colId\");\n\n  return (\n    <Tr>\n      <Td><Input className=\"item-name-input\" value={item.name} placeholder=\"New item\" onChange={(evt) => onNameChanged(evt.target.value)} /></Td>\n      <Td><Input className=\"amount-input\" value={item.amount} type=\"number\" onFocus={(evt) => evt.target.select()} onChange={(evt) => onAmountChanged(evt.target.value)} /></Td>\n      {orderedSplitItems.map(split => {\n        return <Td key={split.person.colId}><Input className=\"ratio-input\" value={split.ratio} type=\"number\" onFocus={(evt) => evt.target.select()} onChange={(evt) => onRatioChanged(split.person, evt.target.value)} /></Td>\n      })}\n    </Tr>\n  );\n}\n\nexport default BillItemRow;","import { useEffect, useState } from 'react';\nimport { Table, Tr, Td, Thead, Tbody, Container, Button, Title, Label, Tfoot } from \"trunx\"\nimport _ from \"lodash\";\nimport { get, set } from \"local-storage\";\nimport { BillItem, BillSummary, Person, SplitInfo } from \"../models/Model\";\nimport AddPersonTextBox from \"../SplitBills/components/AddPersonTextBox\";\nimport BillItemRow from \"../SplitBills/components/BillItemRow\"\n\nconst SplitBillsPage = () => {\n    const [billItems, setBillItems] = useState<BillItem[]>([]);\n    const [people, setPeople] = useState<Person[]>([]);\n\n    const onNewPersonAdded = (personName: string) => {\n\n        const lastColId = _.max(people.map(person => person.colId));\n        const newColId = lastColId !== undefined ? lastColId + 1 : 0;\n        const newPerson = { colId: newColId, name: personName };\n\n        const updatedBillItems = billItems.map(billItem => {\n            return {\n                ...billItem,\n                splitBy: [...billItem.splitBy, { person: newPerson, ratio: 0 }]\n            }\n        });\n\n        setBillItems(updatedBillItems);\n        setPeople([...people, newPerson]);\n    }\n\n    useEffect(() => {\n        setBillItems(get(\"billItems\") || [])\n        setPeople(get(\"people\") || [])\n    }, []);\n\n    useEffect(() => {\n        set(\"billItems\", billItems);\n        set(\"people\", people);\n    }, [billItems, people]);\n\n    const createNewItem = (): BillItem => {\n        const lastRowId = _.max(billItems.map(item => item.rowId));\n        const newRowId = lastRowId !== undefined ? lastRowId + 1 : 0;\n\n        return {\n            rowId: newRowId,\n            name: \"\",\n            amount: 0,\n            splitBy: people.map(person => { return { person, ratio: 0 } })\n        };\n    }\n\n    const onRowAdded = () => {\n        setBillItems([...billItems, createNewItem()])\n    }\n\n    const onItemChanged = (rowId: number, name: string, amount: number, splitBy: SplitInfo[]) => {\n        console.log(`onItemChanged with params [${rowId}, ${name}, ${amount}, ${JSON.stringify(splitBy)}]`)\n\n        const found = _.find(billItems, [\"rowId\", rowId]);\n        if (found) {\n            const updatedItem: BillItem = { rowId, name, amount, splitBy };\n            setBillItems([...billItems.filter(item => item.rowId !== rowId), updatedItem])\n        }\n    }\n\n    const orderedBillItems = _.sortBy(billItems, \"rowId\");\n\n    const getSummary = (): BillSummary => {\n        const totalAmount = _.sum(billItems.map(item => item.amount));\n\n        const allSplitBy = orderedBillItems.map(item => _.sortBy(item.splitBy, \"person.colId\").map(split => {\n            return split.ratio / _.sum(item.splitBy.map(split => split.ratio));\n        }));\n        const transposed = _.zip(...allSplitBy);\n        const results = transposed.map((ratios) => {\n\n            const results = ratios.map((r, i) => (r !== undefined && !isNaN(r) ? r : 0) * orderedBillItems[i].amount);\n            return _.sum(results);\n\n        });\n\n        return {\n            totalAmount: totalAmount,\n            splitTotals: results\n        }\n    }\n\n    const summary = getSummary();\n    const hasSplitErrors = summary.totalAmount !== _.sum(summary.splitTotals);\n    const userDataExists = billItems.length > 0 || people.length > 0;\n\n    const onClearButtonClicked = () => {\n        setBillItems([]);\n        setPeople([]);\n    }\n\n    const getSplitSummary = (summary: BillSummary) => {\n        return <Tr className=\"summary-row\" hasBackgroundDangerLight={hasSplitErrors} hasBackgroundSuccessLight={!hasSplitErrors}>\n            <Td><Label>Total</Label></Td>\n            <Td><Label>${summary.totalAmount}</Label></Td>\n            {summary.splitTotals.map(total => { return <Td><Label>${total.toFixed(2)}</Label></Td> })}\n        </Tr>\n    }\n\n    return (\n        <Container className=\"root\">\n            <Title>Split bills</Title>\n            <Table.Container>\n                <Table>\n                    <Thead>\n                        <Td><Label>Item name</Label></Td>\n                        <Td><Label>Amount</Label></Td>\n                        {people.map(person => {\n                            return <Td key={person.colId}>{person.name}</Td>\n                        })}\n                        <AddPersonTextBox onNewPersonAdded={onNewPersonAdded} />\n                    </Thead>\n                    <Tbody>\n                        {orderedBillItems.map(item => <BillItemRow key={item.rowId} item={item} onItemChanged={onItemChanged} />)}\n                    </Tbody>\n                    <Tfoot>\n                        <Tr className=\"add-item-row\"><Button onClick={() => onRowAdded()}>âž•</Button></Tr>\n                        {summary.totalAmount > 0 && getSplitSummary(summary)}\n                    </Tfoot>\n                </Table>\n                {userDataExists && <a className=\"is-pulled-right\" onClick={onClearButtonClicked}>Clear table</a> }\n            </Table.Container>\n        </Container>\n    );\n}\n\nexport default SplitBillsPage;","import SplitBillsPage from \"./SplitBills/SplitBillsPage\";\nimport \"./App.css\";\n\nconst App = () => {\n  return <SplitBillsPage />\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}